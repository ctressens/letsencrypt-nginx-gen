#!/bin/bash


if ! which git > /dev/null; then
	echo -e "It looks like Git is not installed. Do you want me to take care of this ? [y/n] \c"
	read git
	if [ $git = "y" ] ; then
		sudo apt-get update && sudo apt-get -y install git
	fi
fi

le_path=$RANDOM

echo "Cloning letsencrypt Git repository in /tmp/letsencrypt."
/usr/bin/git clone https://github.com/letsencrypt/letsencrypt /tmp/$le_path

echo "Type you vHost server_name :"
read server_name

echo "Type your vHost root_path :"
read root_path

echo "The config files will be stored in /etc/nginx/sites-enabled/. How do you want the config file to be named ? [recommended : $server_name.conf]"
read asv;

if ( [ $asv = "y" ] ); then 
	config_path=$server_name.conf
else
	config_path=$asv
fi

echo "The being-generated-config file needs PHP-FPM installed."

echo "
server {
	listen 80;
	listen [::]:80;

	server_name $server_name;
	root $root_path;

	index index.html index.php;
	location ~ /.well-known {
		allow all;
	}
	location / {
		try_files \$uri \$uri/ =404;
	}
	location ~ /.php$ {
		include snippets/fastcgi-php.conf;

		fastcgi_pass unix:/var/run/php5-fpm.sock;
		fastcgi_read_timeout 300;
	}
}" > /tmp/$config_path

echo "Are you sure you want to create this vHost ? [Y/n]"
read sure

if [ $sure == "y" ] || [ $sure == "" ] ; then
	mv /tmp/$config_path /etc/nginx/sites-enabled
else
	rm /tmp/$config_path
fi

/usr/sbin/nginx -t && /etc/init.d/nginx restart

/tmp/$le_path/letsencrypt-auto certonly -a webroot --webroot-path $root_path -d $server_name

if [ ! -f /etc/ssl/certs/dhparam.pem ]; then
	openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048
fi

echo "
server {
        listen 443;
        listen [::]:443;
	
	ssl_certificate /etc/letsencrypt/live/$server_name/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/$server_name/privkey.pem;

        server_name $server_name;
        root $root_path;
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_prefer_server_ciphers on;
        ssl_dhparam /etc/ssl/certs/dhparam.pem;
        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_stapling on;
        ssl_stapling_verify on;
        add_header Strict-Transport-Security max-age=15768000;
        index index.html index.php;

        location ~ /.well-known {
                allow all;
        }
        location / {
                try_files \$uri \$uri/ =404;
        }
        location ~ /.php$ {
                include snippets/fastcgi-php.conf;

                fastcgi_pass unix:/var/run/php5-fpm.sock;
                fastcgi_read_timeout 300;
        }
}
server {
	listen 80;

	server_name $server_name;
	return 301 https://\$host\$request_uri;
}" > /etc/nginx/sites-enabled/$asv.$server_name.conf

/etc/init.d/nginx restart
rm -Rf /tmp/$le_path

echo "I'm done ! If you try typing $server_name in a browser, you should be seing this :  $(curl https://$server_name -s)"
